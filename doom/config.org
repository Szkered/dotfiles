#+TITLE: Configuration
#+AUTHOR: Zekun Shi
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Auth Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Zekun Shi"
      user-mail-address "derek.zekun.shi@gmail.com")
#+END_SRC


* Visual Settings

** Themes
Horizon themes need to swap background
#+BEGIN_SRC emacs-lisp
;; (setq doom-theme 'doom-ayu-dark)
(setq doom-theme 'doom-flatwhite)
#+END_SRC

** Fonts
Auto select font size based on resolution. Useful for HiDPI monitors.
#+BEGIN_SRC emacs-lisp
(setq  doom-font (font-spec :family "Iosevka Term" :size 14)
      doom-variable-pitch-font (font-spec :family "Iosevka")
      doom-unicode-font (font-spec :family "Iosevka Term")
      doom-big-font (font-spec :family "Iosevka Term" :size 19))

;; NOTE: this doesn't work well with emacsclient
;; (defun fontify-frame (frame)
;;   (interactive)
;;   (if window-system
;;       (progn
;;         (if (and (> (x-display-pixel-width) 3000) (not (eq system-type 'darwin)))
;;           (progn (setq doom-font "Iosevka Term SS04:pixelsize=22:foundry=UKWN:weight=regular:slant=normal:width=normal:spacing=90:scalable=true")
;;                  (setq doom-variable-pitch-font "Iosevka:pixelsize=20:foundry=UKWN:weight=regular:slant=normal:width=normal:spacing=90:scalable=true"))
;;           (progn (setq doom-font "Iosevka Term SS04:pixelsize=16:foundry=UKWN:weight=regular:slant=normal:width=normal:spacing=90:scalable=true")
;;                  (setq doom-variable-pitch-font "Iosevka:pixelsize=14:foundry=UKWN:weight=regular:slant=normal:width=normal:spacing=90:scalable=true"))))))


;; Fontify current frame
;; (fontify-frame nil)

;; Fontify any future frames
;; (push 'fontify-frame after-make-frame-functions)
#+END_SRC

** Line number
No line number.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+END_SRC

* Org-mode


** file location
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/notes/")
(setq org-roam-directory "~/Dropbox/notes/roam")

(defun filter-org-file (file)
  (equal (car (last (split-string file "\\."))) "org"))

(setq all-org-files
      (seq-filter 'filter-org-file (directory-files-recursively "~/Dropbox/notes/" ".*")))
#+end_src

** priorities
#+begin_src emacs-lisp
(setq org-default-priority ?C)
(setq org-lowest-priority ?D)
(setq org-highest-priority ?A)
#+end_src

** auto tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** list appearances
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers nil)
(setq org-superstar-headline-bullets-list '("‚Åñ"))
(setq org-ellipsis " ... ")
#+end_src

** keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "HANGER(h)" "RUNWAY(r)" "AIRBORNE(a)" "|" "DONE(d)" "FAIL(f)" "CANCELLED(c)" "DELEGATED(g)")))
#+end_src

** hook
#+begin_src emacs-lisp
(add-hook! org-mode
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "I" 'org-clock-in
    "O" 'org-clock-out
    "R" 'org-refile)

  (org-superstar-mode)
  (setq org-agenda-files (directory-files-recursively "~/Dropbox/notes/" "\\.org$")))
#+end_src

** agenda
#+begin_src emacs-lisp
;; persistent org agenda buffer
(setq org-agenda-sticky t)

(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.
     PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(defun chanining/archive-when-done ()
  "Archive current entry if it is marked as DONE"
  (when (org-entry-is-done-p)
    (org-toggle-archive-tag)))

(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 3 :fileskip0 t :narrow 80 :formula %)))
(setq org-agenda-log-mode-items '(closed state clock))
(setq org-clock-idle-time 5)
(setq org-agenda-block-separator (string-to-char " "))
;; (setq my-org-agenda-prefix-format " %-2i %(concat \"[\" (car (last(split-string (or (org-agenda-get-category) \"\") \"-\"))) \"]\") %b %t%s")
(setq my-org-agenda-prefix-format " %-2i %b %t%s")
(setq org-agenda-custom-commands
      '(
        ("d" "Daily agenda and all TODOs"
         (
          (tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "\n\n‚ö° Imminent:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (tags "TODO=\"AIRBORNE\""
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                (air-org-skip-subtree-if-priority ?A)
                                                (air-org-skip-subtree-if-priority ?B)
                                                (air-org-skip-subtree-if-priority ?D)))
                 ;; (org-agenda-prefix-format " %-2:i")
                 (org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "‚ö° Airborne:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo 'done)
                                                (org-agenda-skip-entry-if 'todo '("RUNWAY" "HANGER"))))
                 ;; (org-agenda-prefix-format " %-2:i")
                 (org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "‚ö° Projects:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (tags "PRIORITY=\"D\""
                ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo 'done)
                                                (org-agenda-skip-entry-if 'todo '("RUNWAY" "HANGER"))))
                 ;; (org-agenda-prefix-format " %-2:i")
                 (org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "‚ö° Deferrible:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (agenda "" (
                      (org-agenda-start-day "+0d")
                      (org-agenda-span 2)
                      (org-agenda-overriding-header "‚ö° Schedule:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")
                      ;; (org-agenda-repeating-timestamp-show-all nil)
                      (org-agenda-remove-tags t)
                      (org-agenda-prefix-format   "  %-2i %t %s  ")
                      ;; (org-agenda-prefix-format " %-2i %b %t%s")
                      ;; (org-agenda-todo-keyword-format " ‚òê ")
                      (org-agenda-current-time-string "‚Æú‚îà‚îà‚îà‚îà‚îà‚îà‚îà now")
                      (org-agenda-scheduled-leaders '("" ""))
                      (org-agenda-time-grid (quote ((daily today remove-match)
                                                    (0900 1200 1500 1800 2100)
                                                    "      " "‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà")))))

          (tags "TODO=\"RUNWAY\""
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                (air-org-skip-subtree-if-priority ?A)))
                 ;; (org-agenda-prefix-format " %-2:i")
                 (org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "‚ö° Runway:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))
                                                   (org-agenda-skip-entry-if 'todo '("AIRBORNE" "RUNWAY"))))
                    ;; (org-agenda-prefix-format " %-2:i")
                    (org-agenda-prefix-format my-org-agenda-prefix-format)
                    (org-agenda-todo-keyword-format "")
                    (org-agenda-remove-tags t)
                    (org-agenda-overriding-header "‚ö° Hanger:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫"))))


         ((org-agenda-compact-blocks nil)
          (org-agenda-archives-mode t)
          ;; (org-agenda-start-with-log-mode '(closed))
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-start-on-weekday 1)))

        ("w" "Weekly review"
         agenda ""
         ((org-agenda-span 'week)
          (org-agenda-start-on-weekday 1)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-archives-mode t)
          (org-agenda-prefix-format " %-2i %t %s %b ")
          (org-agenda-remove-tags t)))))

(setq org-agenda-breadcrumbs-separator " ü°í ")
#+end_src

** journal
#+begin_src emacs-lisp
(setq org-journal-file-type 'monthly)
(setq org-journal-enable-agenda-integration t)
(setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                               "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
#+end_src


** weekly time report review mode
#+begin_src emacs-lisp
(defun my-org-agenda-time-grid-spacing ()
  "Set different line spacing w.r.t. time duration."
  (save-excursion
    (let ((colors (list "IndianRed" "SeaGreen4" "sienna3" "DarkSlateGray4"))
          pos
          duration)
      (nconc colors colors)
      (goto-char (point-min))
      (while (setq pos (next-single-property-change (point) 'duration))
        (goto-char pos)
        (when (and (not (equal pos (point-at-eol)))
                   (setq duration (org-get-at-bol 'duration)))
          (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
                (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
            (overlay-put ov 'face `(:background ,(car colors) :foreground "#FFFFFF"))
            (setq colors (cdr colors))
            (overlay-put ov 'line-height line-height)
            (overlay-put ov 'line-spacing (1- line-height))))))))
#+end_src


** agenda category icon list
#+begin_src emacs-lisp
(setq org-agenda-category-icon-alist
      `((".*org.*" ,(list (all-the-icons-faicon "pencil")) nil nil :ascent center)
        (".*gtd.*" ,(list (all-the-icons-faicon "pencil")) nil nil :ascent center)
        (".*research.*" ,(list (all-the-icons-faicon "pencil")) nil nil :ascent center)
        ;; ("neuri" ,(list (all-the-icons-faicon "black-tie" :height 0.9)) nil nil :ascent center)
        (".*sail.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        (".*game_ai.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        (".*neuri.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        (".*career.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        ;; ("math" ,(list (all-the-icons-faicon "graduation-cap" :height 0.65)) nil nil :ascent center)
        (".*math.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*ai4sci.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*phd_application.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*reinforcement_learning.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*cvx.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*geometry.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*quantum.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*nus.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*MA.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*music.*" ,(list (all-the-icons-faicon "music")) nil nil :ascent center)
        (".*health.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*habit.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*workouts.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*nutrition.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*mindfulness.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        ;; ("my_fin" ,(list (all-the-icons-faicon "usd")) nil nil :ascent center)
        (".*fin.*" ,(list (all-the-icons-faicon "line-chart" :height 0.68)) nil nil :ascent center)
        (".*ml.*" ,(list (all-the-icons-octicon "hubot")) nil nil :ascent center)
        (".*cs.*" ,(list (all-the-icons-faicon "terminal")) nil nil :ascent center)
        (".*cpp.*" ,(list (all-the-icons-faicon "terminal")) nil nil :ascent center)
        ;; (".*schedule.*" ,(list (all-the-icons-faicon "commenting")) nil nil :ascent center)
        (".*schedule.*" ,(list (all-the-icons-octicon "calendar")) nil nil :ascent center)
        (".*blockchain.*" ,(list (all-the-icons-faicon "lock")) nil nil :ascent center)
        ("vocab" ,(list (all-the-icons-faicon "book")) nil nil :ascent center)
        (".*read.*" ,(list (all-the-icons-faicon "book")) nil nil :ascent center)
        (".*cooking.*" ,(list (all-the-icons-faicon "fire")) nil nil :ascent center)))
#+end_src

** writeroom mode
#+begin_src emacs-lisp
(add-hook 'org-agenda-finalize-hook #'set-window-clean)

;; use percentage to calculate left/right margin instead of the default 80 char line width
(setq writeroom-width 0.8)

(defun set-window-clean ()
  "clean buffer for org agenda"
  (interactive)
  (setq mode-line-format nil)
  (writeroom-mode)
  (text-scale-decrease 2)
  (my-org-agenda-time-grid-spacing))
#+end_src


** auto export org beamer
#+begin_src emacs-lisp
(defun my-org-beamer-sync-hook ()
  (when (eq major-mode 'org-mode)
    (if (and (boundp 'org-latex-classes)
             (equal (car org-file-tags) #("presentation" 0 12 (inherited t))))
        (org-beamer-export-to-latex))))

(add-hook 'before-save-hook #'my-org-beamer-sync-hook)
#+end_src

* Vterm
Make auto-complete visible
#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/zsh")
(custom-set-faces! '(vterm-color-black :background "#839496"))
#+END_SRC

More scroll back
#+BEGIN_SRC emacs-lisp
(setq vterm-max-scrollback 100000)
#+END_SRC
* Python

* Keybindings
** Base
#+begin_src emacs-lisp
(map!

 :v "s" #'evil-surround-region
 :o "S" #'evil-surround-edit
 :n  "]e"    #'move-text-line-down
 :n  "[e"    #'move-text-line-up

 ;; searching
 "C-s" 'consult-line
 "C-c s" 'consult-ripgrep

 (:when (modulep! :editor multiple-cursors)
   :nv "C-n" #'evil-mc-make-and-goto-next-match
   :nv "C-p" #'evil-mc-make-and-goto-prev-match)

 (:leader
  ;; calendar
  ;; :n "c" 'my-open-calendar

  :n "RET" 'bookmark-jump

  ;; workspace / window management
  :n "o" 'spacemacs/workspaces-transient-state/body
  :n "0" 'treemacs-select-window
  :n "1" 'winum-select-window-1
  :n "2" 'winum-select-window-2
  :n "3" 'winum-select-window-3
  :n "4" 'winum-select-window-4
  :n "5" 'winum-select-window-5
  :n "6" 'winum-select-window-6
  :n "7" 'winum-select-window-7
  :n "8" 'winum-select-window-8
  :n "9" 'winum-select-window-9
  :n "'" 'spacemacs/shell-pop-multi-vterm
  :n "es" 'flycheck-list-errors

  :n "gs" 'magit-status
  :n "gff" 'magit-find-file
  :n "na" 'org-agenda

  :n "Ts" 'load-theme

  ;; jumps
  :n "ji" 'imenu
  :n "." 'evil-goto-definition
  :n "fb" 'bookmark-jump
  :n "bb" 'switch-to-buffer)


 (:after multi-vterm
         (:map multi-vterm-mode-map
          :leader
          :n "mc" 'multi-vterm
          :n "mp" 'multi-vterm-prev
          :n "mn" 'multi-vterm-next))

 (:after calfw
         (:map cfw:calendar-mode-map
          ;; "<return>" 'cfw:show-details-command
          :n "RET" 'cfw:show-details-command
          :n "SPC" 'nil)

         (:map cfw:details-mode-map
          :n "q" 'cfw:details-kill-buffer-command))




 (:after dap-mode
         (:map dap-mode-map
          :leader
          :n "dd" 'dap-debug
          :n "de" 'dap-debug-edit-template
          :n "d." 'dap-hydra))



 (:after julia-mode
         (:map julia-mode-map
          :n "K" 'eldoc-doc-buffer
          :localleader
          :n "'" '+julia/open-repl)))

(after! evil (evil-escape-mode nil))

;; Make evil-mode up/down operate in screen lines instead of logical lines
(define-key evil-motion-state-map "j" 'evil-next-visual-line)
(define-key evil-motion-state-map "k" 'evil-previous-visual-line)

;; Also in visual mode
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)
#+end_src

spacemacs leader
#+BEGIN_SRC emacs-lisp
(setq doom-localleader-key ",")
#+END_SRC
** Python
#+begin_src emacs-lisp
(add-hook! python-mode
 (spacemacs/set-leader-keys-for-major-mode 'python-mode
   "'" 'spacemacs/python-start-or-switch-repl
   "l" 'lsp-execute-code-action
   "sb" 'python-shell-send-buffer
   "sr" 'python-shell-send-region
   "db" 'python-toggle-breakpoint
   "ri" 'py-isort-buffer
   "ru" 'python-autoflake))
#+end_src

* Dired
** dired follow

#+begin_src emacs-lisp
(define-minor-mode dired-follow-mode
  "Diplay file at point in dired after a move."
  :lighter " dired-f"
  :global t
  (if dired-follow-mode
      (advice-add 'dired-next-line :after (lambda (arg) (dired-display-file)))
    (advice-remove 'dired-next-line (lambda (arg) (dired-display-file)))))
#+end_src
