#+TITLE: Configuration
#+AUTHOR: Zekun Shi
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Auth Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Zekun Shi"
      user-mail-address "derek.zekun.shi@gmail.com")
#+END_SRC

* Visual Settings

** Themes
Use light / dark theme based on current time
#+BEGIN_SRC emacs-lisp
(use-package! circadian
  :ensure t
  :config
  (setq circadian-themes '(("8:00" . doom-flatwhite)
                           ("19:30" . doom-horizon)))
  (circadian-setup))
#+END_SRC

** Fix for HiDPI monitors (see [[https://github.com/doomemacs/doomemacs/issues/6131][github issue]]).
#+BEGIN_SRC emacs-lisp
(defadvice! fix-doom-init-fonts-h (&optional reload)
  :override #'doom-init-fonts-h
  (dolist (map `((default . ,doom-font)
                 (fixed-pitch . ,doom-font)
                 (fixed-pitch-serif . ,doom-serif-font)
                 (variable-pitch . ,doom-variable-pitch-font)))
    (when-let* ((face (car map))
                (font (cdr map)))
      (dolist (frame (frame-list))
        (when (display-multi-font-p frame)
          (set-face-attribute face frame
                              :width 'normal :weight 'normal
                              :slant 'normal :font font)))
      (let ((new-specs (doom--make-font-specs face font)))
        ;; Don't save to `customized-face' so it's omitted from `custom-file'
        ;;(put face 'customized-face new-specs)
        (custom-push-theme 'theme-face face 'user 'set new-specs)
        (put face 'face-modified nil))))
  (when (fboundp 'set-fontset-font)
    (let ((fn (doom-rpartial #'member (font-family-list))))
      (when-let (font (cl-find-if fn doom-symbol-fallback-font-families))
        (set-fontset-font t 'symbol font))
      (when-let (font (cl-find-if fn doom-emoji-fallback-font-families))
        (set-fontset-font t 'unicode font))
      (when doom-unicode-font
        (set-fontset-font t 'unicode doom-unicode-font))))
  ;; Users should inject their own font logic in `after-setting-font-hook'
  (run-hooks 'after-setting-font-hook))
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
;; (if (> (x-display-pixel-width) 3000)
;;     (add-to-list 'default-frame-alist '(font . "Iosevka Term-12"))
;;   (setq doom-font (font-spec :family "Iosevka Term" :size 16 :dpi 163)
;;         doom-variable-pitch-font (font-spec :family "Iosevka" :dpi 163)
;;         doom-unicode-font (font-spec :family "Iosevka Term" :dpi 163)
;;         doom-big-font (font-spec :family "Iosevka Term" :size 22 :dpi 163))
;; )
#+END_SRC

** Line number
No line number.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+END_SRC

* Dired/Ranger
** Image preview
don't know why ranger's preview is not working
#+BEGIN_SRC emacs-lisp
(define-minor-mode dired-follow-mode
  "Diplay file at point in dired after a move."
  :lighter " dired-f"
  :global t
  (if dired-follow-mode
      (advice-add 'dired-next-line :after (lambda (arg) (dired-display-file)))
    (advice-remove 'dired-next-line (lambda (arg) (dired-display-file)))))
#+END_SRC

** keybinds
#+BEGIN_SRC emacs-lisp
(map! :after ranger
      (:map ranger-mode-map
          "i" 'dired-follow-mode))
#+END_SRC

* Spell checking

** Disable spell checking by default to speed up boot time
#+BEGIN_SRC emacs-lisp
;; (remove-hook 'text-mode-hook #'spell-fu-mode)
#+END_SRC

* Org-mode
** file location
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/notes/")
(setq org-roam-directory "~/Dropbox/notes/roam")

(defun filter-org-file (file)
  (equal (car (last (split-string file "\\."))) "org"))

(setq all-org-files
      (seq-filter 'filter-org-file (directory-files-recursively "~/Dropbox/notes/" ".*")))
#+end_src

** roam-ui
#+BEGIN_SRC emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

** priorities
#+begin_src emacs-lisp
(setq org-default-priority ?C)
(setq org-lowest-priority ?D)
(setq org-highest-priority ?A)
#+end_src

** auto tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** list appearances
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers nil)
(setq org-superstar-headline-bullets-list '("‚Åñ"))
(setq org-ellipsis " ... ")
#+end_src

** keybind and some hooks
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "I" 'org-clock-in
    "O" 'org-clock-out
    "R" 'org-refile)

  (org-superstar-mode)
  (setq org-agenda-files (directory-files-recursively "~/Dropbox/notes/" "\\.org$")))
#+end_src

** refile
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets
      '((nil :maxlevel . 3)
        (org-agenda-files :maxlevel . 3)
        (all-org-files :maxlevel . 3)))
#+END_SRC

** agenda helpers
#+BEGIN_SRC emacs-lisp
(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.
     PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(defun chanining/archive-when-done ()
  "Archive current entry if it is marked as DONE"
  (when (org-entry-is-done-p)
    (org-toggle-archive-tag)))
#+END_SRC

** agenda appearances
#+BEGIN_SRC emacs-lisp
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 3 :fileskip0 t :narrow 80 :formula %)))
(setq org-agenda-log-mode-items '(closed state clock))
(setq org-clock-idle-time 5)
(setq org-agenda-block-separator (string-to-char " "))
(setq org-agenda-breadcrumbs-separator " ü°í ")
;; (setq my-org-agenda-prefix-format " %-2i %(concat \"[\" (car (last(split-string (or (org-agenda-get-category) \"\") \"-\"))) \"]\") %b %t%s")
(setq my-org-agenda-prefix-format " %-2i %b %t%s")
#+END_SRC

** todo-keywards
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
'((sequence "TODO(t)" "PROJ(p)" "LOOP(r)" "STRT(s)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "|" "DONE(d)" "KILL(k)")
 (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
 (sequence "|" "OKAY(o)" "YES(y)" "NO(n)"))
)
#+END_SRC

** speed up agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-inhibit-startup t)
(defadvice! fix-exclude-agenda-buffers-from-recentf-advice (orig-fn file)
  :override #'+org--exclude-agenda-buffers-from-recentf-a
  (let ((recentf-exclude (list (lambda (_file) t)))
        find-file-hook)
    (funcall orig-fn file)))
#+END_SRC

** daily/weekly agenda format
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(
        ("d" "Daily agenda and all TODOs"
         (
          (todo "STRT"
                ((org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "\n\nüí• Currently Doing:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (todo "PROJ"
                ((org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "üí´ Nonrecurring Time Limited Projects:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (todo "LOOP"
                ((org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "üï≥ Long-term Learning:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          (todo "IDEA"
                ((org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "üí° Ideas to Explore:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          ;; CLOCK REPROT
          (agenda "" (
                      (org-agenda-start-day "+0d")
                      (org-agenda-span 2)
                      (org-agenda-overriding-header "‚ö° Schedule:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")
                      ;; (org-agenda-repeating-timestamp-show-all nil)
                      (org-agenda-remove-tags t)
                      (org-agenda-prefix-format   "  %-2i %t %s  ")
                      ;; (org-agenda-prefix-format " %-2i %b %t%s")
                      ;; (org-agenda-todo-keyword-format " ‚òê ")
                      (org-agenda-current-time-string "‚Æú‚îà‚îà‚îà‚îà‚îà‚îà‚îà now")
                      (org-agenda-scheduled-leaders '("" ""))
                      (org-agenda-time-grid (quote ((daily today remove-match)
                                                    (0900 1200 1500 1800 2100)
                                                    "      " "‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà")))))

          (todo "TODO"
                ((org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "‚úÖ Misc. Todos:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))


          (todo "WAIT"
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                (air-org-skip-subtree-if-priority ?A)
                                                (org-agenda-skip-if nil '(scheduled deadline))
                                                ))
                 (org-agenda-prefix-format my-org-agenda-prefix-format)
                 (org-agenda-todo-keyword-format "")
                 (org-agenda-remove-tags t)
                 (org-agenda-overriding-header "‚è≥ Do these next:\n‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫‚é∫")))

          )


         ((org-agenda-compact-blocks nil)
          (org-agenda-archives-mode t)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-start-on-weekday 1)))

        ("w" "Weekly review"
         agenda ""
         ((org-agenda-span 'week)
          (org-agenda-start-on-weekday 1)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-archives-mode t)
          (org-agenda-prefix-format " %-2i %t %s %b ")
          ))))
#+end_src

** journal
#+begin_src emacs-lisp
(setq org-journal-file-type 'monthly)
(setq org-journal-enable-agenda-integration t)
(setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                               "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
#+end_src

** weekly time report review mode
#+begin_src emacs-lisp
(defun my-org-agenda-time-grid-spacing ()
  "Set different line spacing w.r.t. time duration."
  (save-excursion
    (let ((colors (list "IndianRed" "SeaGreen4" "sienna3" "DarkSlateGray4"))
          pos
          duration)
      (nconc colors colors)
      (goto-char (point-min))
      (while (setq pos (next-single-property-change (point) 'duration))
        (goto-char pos)
        (when (and (not (equal pos (point-at-eol)))
                   (setq duration (org-get-at-bol 'duration)))
          (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
                (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
            (overlay-put ov 'face `(:background ,(car colors) :foreground "#FFFFFF"))
            (setq colors (cdr colors))
            (overlay-put ov 'line-height line-height)
            (overlay-put ov 'line-spacing (1- line-height))))))))
#+end_src

** agenda category icon list
#+begin_src emacs-lisp
(setq org-agenda-category-icon-alist
      `((".*org.*" ,(list (all-the-icons-faicon "pencil")) nil nil :ascent center)
        (".*gtd.*" ,(list (all-the-icons-faicon "pencil")) nil nil :ascent center)
        (".*research.*" ,(list (all-the-icons-faicon "pencil")) nil nil :ascent center)
        ;; ("neuri" ,(list (all-the-icons-faicon "black-tie" :height 0.9)) nil nil :ascent center)
        (".*sail.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        (".*game_ai.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        (".*neuri.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        (".*career.*" ,(list (all-the-icons-octicon "briefcase")) nil nil :ascent center)
        ;; ("math" ,(list (all-the-icons-faicon "graduation-cap" :height 0.65)) nil nil :ascent center)
        (".*math.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*ai4sci.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*phd_application.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*reinforcement_learning.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*cvx.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*geometry.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*quantum.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*nus.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*MA.*" ,(list (all-the-icons-octicon "mortar-board")) nil nil :ascent center)
        (".*music.*" ,(list (all-the-icons-faicon "music")) nil nil :ascent center)
        (".*health.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*habit.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*workouts.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*nutrition.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        (".*mindfulness.*" ,(list (all-the-icons-octicon "pulse")) nil nil :ascent center)
        ;; ("my_fin" ,(list (all-the-icons-faicon "usd")) nil nil :ascent center)
        (".*fin.*" ,(list (all-the-icons-faicon "line-chart" :height 0.68)) nil nil :ascent center)
        (".*ml.*" ,(list (all-the-icons-octicon "hubot")) nil nil :ascent center)
        (".*cs.*" ,(list (all-the-icons-faicon "terminal")) nil nil :ascent center)
        (".*cpp.*" ,(list (all-the-icons-faicon "terminal")) nil nil :ascent center)
        ;; (".*schedule.*" ,(list (all-the-icons-faicon "commenting")) nil nil :ascent center)
        (".*schedule.*" ,(list (all-the-icons-octicon "calendar")) nil nil :ascent center)
        (".*blockchain.*" ,(list (all-the-icons-faicon "lock")) nil nil :ascent center)
        ("vocab" ,(list (all-the-icons-faicon "book")) nil nil :ascent center)
        (".*read.*" ,(list (all-the-icons-faicon "book")) nil nil :ascent center)
        (".*cooking.*" ,(list (all-the-icons-faicon "fire")) nil nil :ascent center)))
#+end_src

** writeroom mode
#+begin_src emacs-lisp
(add-hook 'org-agenda-finalize-hook #'set-window-clean)

;; use percentage to calculate left/right margin instead of the default 80 char line width
(setq writeroom-width 0.8)

(defun set-window-clean ()
  "clean buffer for org agenda"
  (interactive)
  (setq mode-line-format nil)
  (writeroom-mode)
  (text-scale-decrease 2)
  (my-org-agenda-time-grid-spacing))
#+end_src

** auto export org beamer
#+begin_src emacs-lisp
(defun my-org-beamer-sync-hook ()
  (when (eq major-mode 'org-mode)
    (if (and (boundp 'org-latex-classes)
             (equal (car org-file-tags) #("presentation" 0 12 (inherited t))))
        (org-beamer-export-to-latex))))

(add-hook 'before-save-hook #'my-org-beamer-sync-hook)
#+end_src
** keybinds
#+BEGIN_SRC emacs-lisp
(map! :n "na" 'org-agenda)
#+END_SRC

* Python

** auto-format
flake8+autoflake+yapf
#+BEGIN_SRC emacs-lisp
(defcustom python-autoflake-path (executable-find "autoflake")
  "autoflake executable path."
  :group 'python
  :type 'string)

(defun python-autoflake ()
  "Automatically clean up python codes
$ autoflake --in-place --remove-unused-variables --remove-all-unused-imports --remove-duplicate-keys --expand-star-imports <filename>"
  (interactive)
  (when (eq major-mode 'python-mode)
    (shell-command
     (format
      "%s --in-place --remove-unused-variables --remove-all-unused-imports --remove-duplicate-keys --expand-star-imports %s"
      python-autoflake-path
      (shell-quote-argument (buffer-file-name))))
    (revert-buffer t t t)))

(set-formatter! 'yapf  "yapf " :modes '(python-mode))
#+END_SRC

** debugger
#+BEGIN_SRC emacs-lisp
(defun python-toggle-breakpoint ()
  "Add an ipdb break point, highlight it."
  (interactive)
  (let ((trace (cond (t "breakpoint()")))
        (line (thing-at-point 'line)))
    (if (and line (string-match trace line))
        (kill-whole-line)
      (progn
        ;; (back-to-indentation)
        (insert trace)
        (insert "\n")
        (python-indent-line)))))
#+END_SRC

** add extra syntax checker
#+BEGIN_SRC emacs-lisp
;; extra checkers after lsp
(defvar-local my/flycheck-local-cache nil)

(defun my/flycheck-checker-get (fn checker property)
  (or (alist-get property (alist-get checker my/flycheck-local-cache))
      (funcall fn checker property)))

(advice-add 'flycheck-checker-get :around 'my/flycheck-checker-get)

(add-hook 'lsp-managed-mode-hook
          (lambda ()
            (when (derived-mode-p 'python-mode)
              (setq my/flycheck-local-cache '((lsp . ((next-checkers . (python-pylint python-mypy python-flake8))))))
              (setq flycheck-pylintrc "~/.config/pylintrc"))))

#+END_SRC

** ein
#+BEGIN_SRC emacs-lisp
(setq ein:output-area-inlined-images t)
(setq ein:use-auto-complete t)
(setq ein:use-smartrep t)
#+END_SRC

** keybinds
#+begin_src emacs-lisp
(map!
 (:after python
      :map  python-mode-map
      :localleader
      "'" #'sh-switch-to-process-buffer
      "r" #'sh-send-line-or-region
      "db" #'python-toggle-breakpoint)

 (:after dap-mode
         (:map dap-mode-map
          :leader
          "dd" 'dap-debug
          "de" 'dap-debug-edit-template
          "d." 'dap-hydra))
 )
#+end_src

* Vterm
** Make auto-complete visible
#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/zsh")
(custom-set-faces! '(vterm-color-black :background "#839496"))
#+END_SRC

** More scroll back
#+BEGIN_SRC emacs-lisp
(setq vterm-max-scrollback 100000)
#+END_SRC

** Send code
NOTE: need to disable ~read-only-mode~
#+BEGIN_SRC emacs-lisp
(defun sh-send-line-or-region (&optional step)
  (interactive ())
  (let ((proc (get-process "vterm"))
        pbuf min max command)
    (unless proc
      (let ((currbuff (current-buffer)))
        (shell)
        (switch-to-buffer currbuff)
        (setq proc (get-process "vterm"))
        ))
    (setq pbuff (process-buffer proc))
    (if (use-region-p)
        (setq min (region-beginning)
              max (region-end))
      (setq min (point-at-bol)
            max (point-at-eol)))
    (setq command (concat (buffer-substring min max) "\n"))
    (with-current-buffer pbuff
      (goto-char (process-mark proc))
      (insert command)
      (move-marker (process-mark proc) (point))
      ) ;;pop-to-buffer does not work with save-current-buffer -- bug?
    (process-send-string  proc command)
    (display-buffer (process-buffer proc) t)
    (when step
      (goto-char max)
      (next-line))
    ))

(defun sh-send-line-or-region-and-step ()
  (interactive)
  (sh-send-line-or-region t))

(defun sh-switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (process-buffer (get-process "vterm")) t))
#+END_SRC

** keybinds
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :n "'" 'spacemacs/shell-pop-multi-vterm
 (:after multi-vterm
         (:map multi-vterm-mode-map
          :leader
          :n "mc" 'multi-vterm
          :n "mp" 'multi-vterm-prev
          :n "mn" 'multi-vterm-next)))
#+END_SRC

* Copilot
#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("C-e" . 'copilot-accept-completion)
              ("M-f" . 'copilot-accept-completion-by-word)
              ))
#+end_src

* Research Workflow

** citar
#+BEGIN_SRC emacs-lisp
(use-package citar
  :custom
  (citar-bibliography '("~/Dropbox/Apps/Overleaf/lib.bib"))
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup))

(setq citar-library-paths '("~/Dropbox/Library/"))
(setq citar-notes-paths '("~/Dropbox/Library/"))

(use-package citar-embark
  :after citar embark
  :no-require
  :config (citar-embark-mode))
#+END_SRC

** biblio
#+BEGIN_SRC emacs-lisp
(setq biblio-download-directory "~/Dropbox/Library/")
(setq citar-bib "~/Dropbox/Apps/Overleaf/lib.bib")

(defun biblio-current-buffer ()
  "Call an interactive function with the current buffer name."
  (interactive)
  (let ((query (buffer-name)))
    (biblio-lookup nil (string-remove-suffix ".pdf" query))))

(defun paste-to-citar-lib ()
  "Paste the current clipboard contents to a specific file."
  (interactive)
  ;; Ensure the kill ring is not empty
  (if (and kill-ring (not (string= "" (current-kill 0))))
      (let ((content (current-kill 0)))
        (with-temp-buffer
          (when (file-exists-p citar-bib)
            (insert-file-contents citar-bib))
          (goto-char (point-max))
          (insert content)
          (write-file citar-bib)))
    (message "Clipboard is empty.")))
#+END_SRC

** keybinds (for PDF mode)
#+BEGIN_SRC emacs-lisp
(map! (:map pdf-view-mode-map
       :localleader
       "c" 'paste-to-citar-lib))
#+END_SRC

* Email
#+BEGIN_SRC emacs-lisp
(setq mu4e-update-interval 60)
#+END_SRC

* Misc
** disable hl-line-mode in rainbow-mode
#+BEGIN_SRC emacs-lisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+END_SRC

* Other Keybinds
** Cursor and window movements
#+begin_src emacs-lisp
(map!

 :v "s" #'evil-surround-region
 :o "S" #'evil-surround-edit
 :n "]e" #'move-text-line-down
 :n "[e" #'move-text-line-up

 :nv "M-n" #'evil-mc-make-and-goto-next-match
 :nv "M-p" #'evil-mc-make-and-goto-prev-match
 (:map evil-mc-cursor-map
  :nv "M-n" #'evil-mc-make-and-goto-next-match
  :nv "M-p" #'evil-mc-make-and-goto-prev-match
 )
 (:map evil-mc-key-map
  :nv "M-n" #'evil-mc-make-and-goto-next-match
  :nv "M-p" #'evil-mc-make-and-goto-prev-match
 )

 (:leader
  :n "RET" 'bookmark-jump

  ;; workspace / window management
  :n "o" 'spacemacs/workspaces-transient-state/body
  :n "0" 'treemacs-select-window
  :n "1" 'winum-select-window-1
  :n "2" 'winum-select-window-2
  :n "3" 'winum-select-window-3
  :n "4" 'winum-select-window-4
  :n "5" 'winum-select-window-5
  :n "6" 'winum-select-window-6
  :n "7" 'winum-select-window-7
  :n "8" 'winum-select-window-8
  :n "9" 'winum-select-window-9

  ;; jumps
  :n "ji" 'imenu
  :n "." 'evil-goto-definition
  :n "bb" 'switch-to-buffer)

)

;; (after! evil (evil-escape-mode nil))

;; Make evil-mode up/down operate in screen lines instead of logical lines
(define-key evil-motion-state-map "j" 'evil-next-visual-line)
(define-key evil-motion-state-map "k" 'evil-previous-visual-line)

;; Also in visual mode
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)
#+end_src

** Searching
#+BEGIN_SRC emacs-lisp
(map!
 "C-s" 'consult-line
 "C-c C-s" '+vertico/search-symbol-at-point
 "C-c s" 'consult-ripgrep
)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
(map! (:leader
  :n "es" 'flycheck-list-errors
  :n "gs" 'magit-status
  :n "gff" 'magit-find-file
  :n "Ts" 'load-theme
))
#+END_SRC

** spacemacs leader
#+BEGIN_SRC emacs-lisp
(setq doom-localleader-key ",")
#+END_SRC

* Starting page

** agenda as starting page
#+BEGIN_SRC emacs-lisp
(defun emacs-startup-screen-server ()
  "display the weekly org-agenda and all todos. used for server mode"
  (find-file "/home/zekun/Dropbox/notes/roam/20210303220745-entry_point.org")
  (setq org-agenda-sticky t)
  (org-agenda nil "d")
  ;; hiDPI hack
  (add-to-list 'default-frame-alist '(font . "Iosevka Term-12"))
)

(defun emacs-startup-screen ()
  "display the weekly org-agenda and all todos. used for server mode"
  (find-file "/home/zekun/Dropbox/notes/roam/20210303220745-entry_point.org")
  (setq org-agenda-sticky t)
  (org-agenda nil "d")

  ;; for loDPI we still need to set the font
  (if (< (x-display-pixel-width) 3000)
    (setq doom-font (font-spec :family "Iosevka Term" :size 16 :dpi 163)
          doom-variable-pitch-font (font-spec :family "Iosevka" :dpi 163)
          doom-unicode-font (font-spec :family "Iosevka Term" :dpi 163)
          doom-big-font (font-spec :family "Iosevka Term" :size 22 :dpi 163))
  )
)

(add-hook! 'emacs-startup-hook (emacs-startup-screen-server))
#+END_SRC
